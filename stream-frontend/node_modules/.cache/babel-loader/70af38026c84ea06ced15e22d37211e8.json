{"ast":null,"code":"import{groupBy,filter}from'lodash';import moment from'moment';var group_month=function group_month(documents){var month_grouping=groupBy(documents,function(n){return n.month;});var months=Object.keys(month_grouping);var arrSum=function arrSum(arr){return arr.reduce(function(a,b){return a+b;},0);};var list_of_objects=[];for(var i=0;i<months.length;i++){var data_object={};var index=months[i];var month_docs=month_grouping[index];var amount_payment=[];var amount_refund=[];for(var _i=0;_i<month_docs.length;_i++){if(month_docs[_i].document_type==\"Payment\"){amount_payment.push(month_docs[_i].amount);}else if(month_docs[_i].document_type==\"Refund\"){amount_refund.push(Math.round(month_docs[_i].amount/0.75));}}data_object.amount_payment=arrSum(amount_payment);data_object.amount_refund=arrSum(amount_refund);var groups=groupBy(month_docs,function(n){return n.document_type;});data_object.month=index;data_object.refunds=groups['Refund'].length;data_object.payments=groups['Payment'].length;data_object.announcements=groups['Announcement'].length;data_object.epoch=moment(index,\"YYYY/MM\").valueOf();list_of_objects.push(data_object);}list_of_objects.sort(function(a,b){return a.epoch-b.epoch;});return list_of_objects;};export default group_month;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/DashboardB/utils.js"],"names":["groupBy","filter","moment","group_month","documents","month_grouping","n","month","months","Object","keys","arrSum","arr","reduce","a","b","list_of_objects","i","length","data_object","index","month_docs","amount_payment","amount_refund","document_type","push","amount","Math","round","groups","refunds","payments","announcements","epoch","valueOf","sort"],"mappings":"AAAA,OAAQA,OAAR,CAAiBC,MAAjB,KAA8B,QAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,SAAD,CAAe,CAC/B,GAAIC,CAAAA,cAAc,CAAGL,OAAO,CAACI,SAAD,CAAY,SAASE,CAAT,CAAY,CAClD,MAAOA,CAAAA,CAAC,CAACC,KAAT,CACD,CAF2B,CAA5B,CAKH,GAAIC,CAAAA,MAAM,CAAGC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAb,CAEA,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,MAAJ,CAAW,SAACC,CAAD,CAAGC,CAAH,QAASD,CAAAA,CAAC,CAAGC,CAAb,EAAX,CAA2B,CAA3B,CAAJ,EAAlB,CAEC,GAAMC,CAAAA,eAAe,CAAG,EAAxB,CACA,IAAI,GAAIC,CAAAA,CAAC,CAAE,CAAX,CAAcA,CAAC,CAAET,MAAM,CAACU,MAAxB,CAAgCD,CAAC,EAAjC,CAAoC,CAChC,GAAME,CAAAA,WAAW,CAAG,EAApB,CACA,GAAIC,CAAAA,KAAK,CAAGZ,MAAM,CAACS,CAAD,CAAlB,CACA,GAAII,CAAAA,UAAU,CAAGhB,cAAc,CAACe,KAAD,CAA/B,CACA,GAAIE,CAAAA,cAAc,CAAG,EAArB,CACA,GAAIC,CAAAA,aAAa,CAAG,EAApB,CACA,IAAK,GAAIN,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGI,UAAU,CAACH,MAA/B,CAAuCD,EAAC,EAAxC,CAA4C,CAC1C,GAAII,UAAU,CAACJ,EAAD,CAAV,CAAcO,aAAd,EAA+B,SAAnC,CAA8C,CAC5CF,cAAc,CAACG,IAAf,CAAoBJ,UAAU,CAACJ,EAAD,CAAV,CAAcS,MAAlC,EAED,CAHD,IAGO,IAAIL,UAAU,CAACJ,EAAD,CAAV,CAAcO,aAAd,EAA+B,QAAnC,CAA6C,CAClDD,aAAa,CAACE,IAAd,CAAmBE,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACJ,EAAD,CAAV,CAAcS,MAAd,CAAqB,IAAhC,CAAnB,EACD,CAEF,CAEDP,WAAW,CAACG,cAAZ,CAA6BX,MAAM,CAACW,cAAD,CAAnC,CACAH,WAAW,CAACI,aAAZ,CAA4BZ,MAAM,CAACY,aAAD,CAAlC,CAGA,GAAIM,CAAAA,MAAM,CAAG7B,OAAO,CAACqB,UAAD,CAAa,SAASf,CAAT,CAAW,CACtC,MAAOA,CAAAA,CAAC,CAACkB,aAAT,CACL,CAFmB,CAApB,CAGAL,WAAW,CAACZ,KAAZ,CAAoBa,KAApB,CACAD,WAAW,CAACW,OAAZ,CAAsBD,MAAM,CAAC,QAAD,CAAN,CAAiBX,MAAvC,CACAC,WAAW,CAACY,QAAZ,CAAuBF,MAAM,CAAC,SAAD,CAAN,CAAkBX,MAAzC,CACAC,WAAW,CAACa,aAAZ,CAA4BH,MAAM,CAAC,cAAD,CAAN,CAAuBX,MAAnD,CACAC,WAAW,CAACc,KAAZ,CAAoB/B,MAAM,CAACkB,KAAD,CAAQ,SAAR,CAAN,CAAyBc,OAAzB,EAApB,CACAlB,eAAe,CAACS,IAAhB,CAAqBN,WAArB,EACH,CAEDH,eAAe,CAACmB,IAAhB,CAAqB,SAASrB,CAAT,CAAYC,CAAZ,CAAe,CAClC,MAAOD,CAAAA,CAAC,CAACmB,KAAF,CAAUlB,CAAC,CAACkB,KAAnB,CACD,CAFD,EAGD,MAAOjB,CAAAA,eAAP,CAEA,CA/CD,CAiDA,cAAeb,CAAAA,WAAf","sourcesContent":["import {groupBy, filter} from 'lodash';\nimport moment from 'moment';\n\nconst group_month = (documents) => {\n    var month_grouping = groupBy(documents, function(n) {\n      return n.month;\n    });\n\n\n let months = Object.keys(month_grouping);\n\n const arrSum = arr => arr.reduce((a,b) => a + b, 0);\n\n  const list_of_objects = [];\n  for(let i =0; i< months.length; i++){\n      const data_object = {}\n      let index = months[i]\n      let month_docs = month_grouping[index];\n      let amount_payment = []\n      let amount_refund = []\n      for (let i = 0; i < month_docs.length; i++) {\n        if (month_docs[i].document_type == \"Payment\") {\n          amount_payment.push(month_docs[i].amount)\n          \n        } else if (month_docs[i].document_type == \"Refund\") { \n          amount_refund.push(Math.round(month_docs[i].amount/0.75))\n        }\n        \n      }\n\n      data_object.amount_payment = arrSum(amount_payment)\n      data_object.amount_refund = arrSum(amount_refund)\n\n\n      var groups = groupBy(month_docs, function(n){\n            return n.document_type        \n      })\n      data_object.month = index \n      data_object.refunds = groups['Refund'].length\n      data_object.payments = groups['Payment'].length\n      data_object.announcements = groups['Announcement'].length\n      data_object.epoch = moment(index, \"YYYY/MM\").valueOf()\n      list_of_objects.push(data_object)\n  }\n  \n  list_of_objects.sort(function(a, b) {\n    return a.epoch - b.epoch;\n  })\n return list_of_objects\n\n}\n\nexport default group_month"]},"metadata":{},"sourceType":"module"}