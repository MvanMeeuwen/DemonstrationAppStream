{"ast":null,"code":"var _jsxFileName = \"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/Legend.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear, range } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nconst Legend = ({\n  data,\n  property\n}) => {\n  const wrapperRef = useRef();\n  const legendRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const legend = select(legendRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#edf0f3\", \"#096dd9\"]);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect();\n    console.log(width, height);\n    let diff = Math.abs(minProp - maxProp);\n    let stepsize = diff / 10;\n    let colorRange = range(minProp, maxProp, stepsize);\n    let colorLegend = [];\n    let bandwith = [];\n\n    for (let i = 0; i < colorRange.length; i++) {\n      let num = colorRange[i];\n      colorLegend.push(colorScale(num));\n\n      if (i % 2 == 0 || i == colorRange.length) {\n        bandwith.push(Math.round(num).toString());\n      } else {\n        bandwith.push(\"\");\n      }\n    }\n\n    legend.append(\"g\").selectAll(\"rect\").data(colorLegend).enter().append(\"rect\").attr(\"fill\", function (d, i) {\n      return colorLegend[i];\n    }).attr(\"x\", function (d, i) {\n      return i * 30;\n    }).attr(\"y\", 0).attr(\"width\", 30).attr(\"height\", 10);\n    legend.append(\"g\").selectAll(\"text\").data(bandwith).enter().append(\"text\").attr(\"font-size\", \"10px\").attr(\"font-family\", \"HelveticaNeue-Light, Helvetica, sans-serif\").attr(\"x\", function (d, i) {\n      return i * 30;\n    }).attr(\"y\", 20).text(function (d) {\n      return d;\n    });\n  }, [data, dimensions, property]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      heigth: \"30px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: legendRef,\n    id: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Legend;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/Legend.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","range","useResizeObserver","Legend","data","property","wrapperRef","legendRef","dimensions","legend","current","minProp","features","feature","properties","maxProp","colorScale","domain","width","height","getBoundingClientRect","console","log","diff","Math","abs","stepsize","colorRange","colorLegend","bandwith","i","length","num","push","round","toString","append","selectAll","enter","attr","d","text","heigth"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear, range } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nconst Legend = ({ data, property }) => {\n    const wrapperRef = useRef();\n    const legendRef = useRef();\n    const dimensions = useResizeObserver(wrapperRef);\n\n    useEffect(() => {\n        const legend = select(legendRef.current)\n        const minProp = min(data.features, feature => feature.properties[property]);\n        const maxProp = max(data.features, feature => feature.properties[property]);\n        \n        const colorScale = scaleLinear()\n            .domain([minProp, maxProp])\n            .range([\"#edf0f3\", \"#096dd9\"]);\n        \n        const { width, height } =\n            dimensions || wrapperRef.current.getBoundingClientRect();\n\n        console.log(width, height)\n\n        let diff = Math.abs(minProp - maxProp);\n        let stepsize = diff / 10; \n        let colorRange = range(minProp, maxProp, stepsize)\n        let colorLegend = []\n        let bandwith = []\n        for(let i = 0; i < colorRange.length; i ++ ) {\n            let num  = colorRange[i]\n            colorLegend.push(colorScale(num))\n            if (i % 2 == 0 || i == colorRange.length){\n                bandwith.push(Math.round(num).toString()) \n            } else {\n                bandwith.push(\"\")\n            }\n            \n        }\n\n      legend.append(\"g\")\n        .selectAll(\"rect\")\n        .data(colorLegend)\n        .enter()\n        .append(\"rect\")\n        .attr(\"fill\", function(d, i){ return colorLegend[i]; })\n        .attr(\"x\", function(d, i){ return (i*30); })\n        .attr(\"y\", 0)\n        .attr(\"width\", 30)\n        .attr(\"height\", 10);\n\n        legend.append(\"g\")\n             .selectAll(\"text\")\n             .data(bandwith)\n             .enter()\n             .append(\"text\")\n            .attr(\"font-size\", \"10px\")\n            .attr(\"font-family\", \"HelveticaNeue-Light, Helvetica, sans-serif\")\n            .attr(\"x\", function(d, i){ return (i*30); })\n            .attr(\"y\", 20)\n        .text(function(d){ return d; })\n  \n\n\n\n\n\n    }, [data, dimensions, property]);\n\n    return (\n        <div ref={wrapperRef} style={{ heigth: \"30px\" }}>\n            <svg ref={legendRef} id=\"legend\"></svg>\n        </div>\n\n    )\n\n\n\n    \n\n\n\n}\n\n\nexport default Legend;"]},"metadata":{},"sourceType":"module"}