{"ast":null,"code":"import { groupBy, filter } from 'lodash';\nimport moment from 'moment';\n\nconst group_month = documents => {\n  var month_grouping = groupBy(documents, function (n) {\n    return n.month;\n  });\n  let months = Object.keys(month_grouping);\n  console.log(month_grouping);\n\n  const arrSum = arr => arr.reduce((a, b) => a + b, 0);\n\n  const list_of_objects = [];\n\n  for (let i = 0; i < months.length; i++) {\n    const data_object = {};\n    let index = months[i];\n    let month_docs = month_grouping[index];\n    let amount_payment = [];\n    let amount_refund = [];\n\n    for (let i = 0; i < month_docs.length; i++) {\n      if (month_docs[i] == \"Payment\") {\n        amount_payment.push(month_docs[i].amount);\n        console.log(month_docs[i]);\n      } else if (month_docs[i] == \"Payment\") {\n        amount_refund.push(month_docs[i].amount);\n      }\n    }\n\n    data_object.amount_payment = arrSum(amount_payment);\n    data_object.amount_refund = arrSum(amount_refund);\n    var groups = groupBy(month_docs, function (n) {\n      return n.document_type;\n    });\n    data_object.month = index;\n    data_object.refunds = groups['Refund'].length;\n    data_object.payments = groups['Payment'].length;\n    data_object.announcements = groups['Announcement'].length;\n    data_object.epoch = moment(index, \"YYYY/MM\").valueOf();\n    list_of_objects.push(data_object);\n  }\n\n  list_of_objects.sort(function (a, b) {\n    return a.epoch - b.epoch;\n  });\n  return list_of_objects;\n};\n\nexport default group_month;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Dashboard/utils.js"],"names":["groupBy","filter","moment","group_month","documents","month_grouping","n","month","months","Object","keys","console","log","arrSum","arr","reduce","a","b","list_of_objects","i","length","data_object","index","month_docs","amount_payment","amount_refund","push","amount","groups","document_type","refunds","payments","announcements","epoch","valueOf","sort"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,MAAjB,QAA8B,QAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAC/B,MAAIC,cAAc,GAAGL,OAAO,CAACI,SAAD,EAAY,UAASE,CAAT,EAAY;AAClD,WAAOA,CAAC,CAACC,KAAT;AACD,GAF2B,CAA5B;AAKH,MAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAb;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ;;AACA,QAAMQ,MAAM,GAAGC,GAAG,IAAIA,GAAG,CAACC,MAAJ,CAAW,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAAGC,CAAxB,EAA2B,CAA3B,CAAtB;;AAEC,QAAMC,eAAe,GAAG,EAAxB;;AACA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAEX,MAAM,CAACY,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAChC,UAAME,WAAW,GAAG,EAApB;AACA,QAAIC,KAAK,GAAGd,MAAM,CAACW,CAAD,CAAlB;AACA,QAAII,UAAU,GAAGlB,cAAc,CAACiB,KAAD,CAA/B;AACA,QAAIE,cAAc,GAAG,EAArB;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAAU,CAACH,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAII,UAAU,CAACJ,CAAD,CAAV,IAAiB,SAArB,EAAgC;AAC9BK,QAAAA,cAAc,CAACE,IAAf,CAAoBH,UAAU,CAACJ,CAAD,CAAV,CAAcQ,MAAlC;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAYW,UAAU,CAACJ,CAAD,CAAtB;AACD,OAHD,MAGO,IAAII,UAAU,CAACJ,CAAD,CAAV,IAAiB,SAArB,EAAgC;AACrCM,QAAAA,aAAa,CAACC,IAAd,CAAmBH,UAAU,CAACJ,CAAD,CAAV,CAAcQ,MAAjC;AACD;AAEF;;AAEDN,IAAAA,WAAW,CAACG,cAAZ,GAA6BX,MAAM,CAACW,cAAD,CAAnC;AACAH,IAAAA,WAAW,CAACI,aAAZ,GAA4BZ,MAAM,CAACY,aAAD,CAAlC;AAGA,QAAIG,MAAM,GAAG5B,OAAO,CAACuB,UAAD,EAAa,UAASjB,CAAT,EAAW;AACtC,aAAOA,CAAC,CAACuB,aAAT;AACL,KAFmB,CAApB;AAGAR,IAAAA,WAAW,CAACd,KAAZ,GAAoBe,KAApB;AACAD,IAAAA,WAAW,CAACS,OAAZ,GAAsBF,MAAM,CAAC,QAAD,CAAN,CAAiBR,MAAvC;AACAC,IAAAA,WAAW,CAACU,QAAZ,GAAuBH,MAAM,CAAC,SAAD,CAAN,CAAkBR,MAAzC;AACAC,IAAAA,WAAW,CAACW,aAAZ,GAA4BJ,MAAM,CAAC,cAAD,CAAN,CAAuBR,MAAnD;AACAC,IAAAA,WAAW,CAACY,KAAZ,GAAoB/B,MAAM,CAACoB,KAAD,EAAQ,SAAR,CAAN,CAAyBY,OAAzB,EAApB;AACAhB,IAAAA,eAAe,CAACQ,IAAhB,CAAqBL,WAArB;AACH;;AAEDH,EAAAA,eAAe,CAACiB,IAAhB,CAAqB,UAASnB,CAAT,EAAYC,CAAZ,EAAe;AAClC,WAAOD,CAAC,CAACiB,KAAF,GAAUhB,CAAC,CAACgB,KAAnB;AACD,GAFD;AAGD,SAAOf,eAAP;AAEA,CA/CD;;AAiDA,eAAef,WAAf","sourcesContent":["import {groupBy, filter} from 'lodash';\nimport moment from 'moment';\n\nconst group_month = (documents) => {\n    var month_grouping = groupBy(documents, function(n) {\n      return n.month;\n    });\n\n\n let months = Object.keys(month_grouping);\n console.log(month_grouping)\n const arrSum = arr => arr.reduce((a,b) => a + b, 0);\n\n  const list_of_objects = [];\n  for(let i =0; i< months.length; i++){\n      const data_object = {}\n      let index = months[i]\n      let month_docs = month_grouping[index];\n      let amount_payment = []\n      let amount_refund = []\n      for (let i = 0; i < month_docs.length; i++) {\n        if (month_docs[i] == \"Payment\") {\n          amount_payment.push(month_docs[i].amount)\n          console.log(month_docs[i])\n        } else if (month_docs[i] == \"Payment\") { \n          amount_refund.push(month_docs[i].amount)\n        }\n        \n      }\n\n      data_object.amount_payment = arrSum(amount_payment)\n      data_object.amount_refund = arrSum(amount_refund)\n\n\n      var groups = groupBy(month_docs, function(n){\n            return n.document_type        \n      })\n      data_object.month = index \n      data_object.refunds = groups['Refund'].length\n      data_object.payments = groups['Payment'].length\n      data_object.announcements = groups['Announcement'].length\n      data_object.epoch = moment(index, \"YYYY/MM\").valueOf()\n      list_of_objects.push(data_object)\n  }\n  \n  list_of_objects.sort(function(a, b) {\n    return a.epoch - b.epoch;\n  })\n return list_of_objects\n\n}\n\nexport default group_month"]},"metadata":{},"sourceType":"module"}