{"ast":null,"code":"import React,{PureComponent}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{Typography}from'antd';import{line,map}from'd3';var Graphed=function Graphed(_ref){var data=_ref.data,variable=_ref.variable;var colors=['#1890ff',\"#389e0d\",\"#d4380d\"];var types=[\"refunds\",\"payments\",\"announcements\"];var typelist=[];for(var i=0;i<types.length;i++){var _line=/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:types[i],stroke:colors[i],strokeWidth:2});typelist.push(_line);}var amount_list=[];var amount=[/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"amount_refund\",stroke:colors[0],strokeWidth:2}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"amount_payment\",stroke:colors[1],strokeWidth:2})];var unit=variable===\"dollar\"?\"$\":\"\";return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Typography.Title,{level:2},\"Temporal view\"),/*#__PURE__*/React.createElement(Typography.Paragraph,null,\"Cumulative \",variable===\"dollar\"?\"dollar value\":\"number of notices\",\" per month\"),/*#__PURE__*/React.createElement(LineChart,{width:800,height:400,data:data,margin:{top:5,right:30,left:20,bottom:5}},/*#__PURE__*/React.createElement(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"month\"}),/*#__PURE__*/React.createElement(YAxis,{unit:unit}),/*#__PURE__*/React.createElement(Tooltip,null),/*#__PURE__*/React.createElement(Legend,null),variable===\"dollar\"?amount:typelist));};export default Graphed;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/DashboardB/LineChart.js"],"names":["React","PureComponent","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Typography","line","map","Graphed","data","variable","colors","types","typelist","i","length","push","amount_list","amount","unit","top","right","left","bottom"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CACA,OACEC,SADF,CACaC,IADb,CACmBC,KADnB,CAC0BC,KAD1B,CACiCC,aADjC,CACgDC,OADhD,CACyDC,MADzD,KAEO,UAFP,CAGA,OAASC,UAAT,KAA2B,MAA3B,CACA,OAASC,IAAT,CAAeC,GAAf,KAA0B,IAA1B,CAKA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAsB,IAApBC,CAAAA,IAAoB,MAApBA,IAAoB,CAAdC,QAAc,MAAdA,QAAc,CAIlC,GAAMC,CAAAA,MAAM,CAAG,CAAC,SAAD,CAAY,SAAZ,CAAuB,SAAvB,CAAf,CACA,GAAMC,CAAAA,KAAK,CAAG,CAAC,SAAD,CAAY,UAAZ,CAAwB,eAAxB,CAAd,CAEA,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,KAAK,CAACG,MAA1B,CAAkCD,CAAC,EAAnC,CAAsC,CAClC,GAAIR,CAAAA,KAAI,cAAG,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,CAAsB,OAAO,CAAEM,KAAK,CAACE,CAAD,CAApC,CAAyC,MAAM,CAAEH,MAAM,CAACG,CAAD,CAAvD,CAA4D,WAAW,CAAE,CAAzE,EAAX,CACAD,QAAQ,CAACG,IAAT,CAAcV,KAAd,EACH,CAED,GAAMW,CAAAA,WAAW,CAAG,EAApB,CAGA,GAAMC,CAAAA,MAAM,CAAG,cAAC,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,CAAsB,OAAO,CAAE,eAA/B,CAAgD,MAAM,CAAEP,MAAM,CAAC,CAAD,CAA9D,CAAmE,WAAW,CAAE,CAAhF,EAAD,cACC,oBAAC,IAAD,EAAM,IAAI,CAAC,UAAX,CAAsB,OAAO,CAAE,gBAA/B,CAAiD,MAAM,CAAEA,MAAM,CAAC,CAAD,CAA/D,CAAoE,WAAW,CAAE,CAAjF,EADD,CAAf,CAGA,GAAIQ,CAAAA,IAAI,CAAGT,QAAQ,GAAK,QAAb,CAAwB,GAAxB,CAA8B,EAAzC,CAEA,mBAAO,qDACP,oBAAC,UAAD,CAAY,KAAZ,EAAkB,KAAK,CAAI,CAA3B,kBADO,cAIH,oBAAC,UAAD,CAAY,SAAZ,oBACYA,QAAQ,GAAK,QAAb,CAAuB,cAAvB,CAAwC,mBADpD,cAJG,cASL,oBAAC,SAAD,EACE,KAAK,CAAE,GADT,CAEE,MAAM,CAAE,GAFV,CAGE,IAAI,CAAED,IAHR,CAIE,MAAM,CAAE,CACNW,GAAG,CAAE,CADC,CACEC,KAAK,CAAE,EADT,CACaC,IAAI,CAAE,EADnB,CACuBC,MAAM,CAAE,CAD/B,CAJV,eAQE,oBAAC,aAAD,EAAe,eAAe,CAAC,KAA/B,EARF,cASE,oBAAC,KAAD,EAAO,OAAO,CAAC,OAAf,EATF,cAUE,oBAAC,KAAD,EAAO,IAAI,CAAEJ,IAAb,EAVF,cAWE,oBAAC,OAAD,MAXF,cAYE,oBAAC,MAAD,MAZF,CAaGT,QAAQ,GAAK,QAAb,CAAwBQ,MAAxB,CAAiCL,QAbpC,CATK,CAAP,CA2BH,CAhDD,CAkDA,cAAeL,CAAAA,OAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { Typography } from 'antd';\nimport { line, map } from 'd3';\n\n\n\n\nconst Graphed = ({data, variable}) => {\n\n    \n\n    const colors = ['#1890ff', \"#389e0d\", \"#d4380d\"]\n    const types = [\"refunds\", \"payments\", \"announcements\"] \n    \n    const typelist = [];\n    for (let i = 0; i < types.length; i++){\n        let line = <Line type=\"monotone\" dataKey={types[i]} stroke={colors[i]} strokeWidth={2} />\n        typelist.push(line)\n    }\n\n    const amount_list = []\n\n    \n    const amount = [<Line type=\"monotone\" dataKey={\"amount_refund\"} stroke={colors[0]} strokeWidth={2} />,\n                    <Line type=\"monotone\" dataKey={\"amount_payment\"} stroke={colors[1]} strokeWidth={2} />]\n\n    let unit = variable === \"dollar\" ? \"$\" : \"\"\n   \n    return <>\n    <Typography.Title level = {2} >\n          Temporal view\n        </Typography.Title>\n        <Typography.Paragraph>\n        Cumulative {variable === \"dollar\"? \"dollar value\" : \"number of notices\"} per month\n        </Typography.Paragraph>\n    \n\n      <LineChart\n        width={800}\n        height={400}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"month\" />\n        <YAxis unit={unit}/>\n        <Tooltip />\n        <Legend />\n        {variable === \"dollar\" ? amount : typelist}\n\n      </LineChart>\n    </>;\n  \n}\n\nexport default Graphed;"]},"metadata":{},"sourceType":"module"}