{"ast":null,"code":"var _jsxFileName = \"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Dashboard/LineChart.js\";\nimport React, { PureComponent } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { line, map } from 'd3';\n\nconst Graphed = ({\n  data,\n  variable\n}) => {\n  console.log(data);\n  const colors = ['#1890ff', \"#389e0d\", \"#d4380d\"];\n  const types = [\"refunds\", \"payments\", \"announcements\"];\n  const typelist = [];\n\n  for (let i = 0; i < types.length; i++) {\n    let line = /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: entities[i],\n      stroke: colors[i],\n      strokeWidth: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }\n    });\n    teyplist.push(line);\n  }\n\n  const amount_list = [];\n  const amount = /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"amount\",\n    stroke: colors[0],\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }\n  });\n  let unit = variable === \"dollar\" ? \"$\" : \"\";\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 800,\n    height: 400,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"month\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    unit: unit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), variable === \"dollar\" ? amount : typelist);\n};\n\nexport default Graphed;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Dashboard/LineChart.js"],"names":["React","PureComponent","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","line","map","Graphed","data","variable","console","log","colors","types","typelist","i","length","entities","teyplist","push","amount_list","amount","unit","top","right","left","bottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SACEC,SADF,EACaC,IADb,EACmBC,KADnB,EAC0BC,KAD1B,EACiCC,aADjC,EACgDC,OADhD,EACyDC,MADzD,QAEO,UAFP;AAGA,SAASC,IAAT,EAAeC,GAAf,QAA0B,IAA1B;;AAKA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAAsB;AAElCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,QAAMI,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAAf;AACA,QAAMC,KAAK,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,eAAxB,CAAd;AAEA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,QAAIV,IAAI,gBAAG,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAEY,QAAQ,CAACF,CAAD,CAAvC;AAA4C,MAAA,MAAM,EAAEH,MAAM,CAACG,CAAD,CAA1D;AAA+D,MAAA,WAAW,EAAE,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAX;AACAG,IAAAA,QAAQ,CAACC,IAAT,CAAcd,IAAd;AACH;;AAED,QAAMe,WAAW,GAAG,EAApB;AAGA,QAAMC,MAAM,gBAAG,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAE,QAA/B;AAAyC,IAAA,MAAM,EAAET,MAAM,CAAC,CAAD,CAAvD;AAA4D,IAAA,WAAW,EAAE,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf;AAEA,MAAIU,IAAI,GAAGb,QAAQ,KAAK,QAAb,GAAwB,GAAxB,GAA8B,EAAzC;AAEA,sBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,GADT;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,IAAI,EAAED,IAHR;AAIE,IAAA,MAAM,EAAE;AACNe,MAAAA,GAAG,EAAE,CADC;AACEC,MAAAA,KAAK,EAAE,EADT;AACaC,MAAAA,IAAI,EAAE,EADnB;AACuBC,MAAAA,MAAM,EAAE;AAD/B,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEJ,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAWE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,eAYE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaGb,QAAQ,KAAK,QAAb,GAAwBY,MAAxB,GAAiCP,QAbpC,CADF;AAuBH,CA3CD;;AA6CA,eAAeP,OAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { line, map } from 'd3';\n\n\n\n\nconst Graphed = ({data, variable}) => {\n\n    console.log(data)\n\n    const colors = ['#1890ff', \"#389e0d\", \"#d4380d\"]\n    const types = [\"refunds\", \"payments\", \"announcements\"] \n    \n    const typelist = [];\n    for (let i = 0; i < types.length; i++){\n        let line = <Line type=\"monotone\" dataKey={entities[i]} stroke={colors[i]} strokeWidth={2} />\n        teyplist.push(line)\n    }\n\n    const amount_list = []\n\n    \n    const amount = <Line type=\"monotone\" dataKey={\"amount\"} stroke={colors[0]} strokeWidth={2} />\n\n    let unit = variable === \"dollar\" ? \"$\" : \"\"\n   \n    return (\n      <LineChart\n        width={800}\n        height={400}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"month\" />\n        <YAxis unit={unit}/>\n        <Tooltip />\n        <Legend />\n        {variable === \"dollar\" ? amount : typelist}\n        \n        \n    \n        \n        \n      </LineChart>\n    );\n  \n}\n\nexport default Graphed;"]},"metadata":{},"sourceType":"module"}