{"ast":null,"code":"'use strict';\n\nvar base64 = require('./base64');\n/**\nUsage:\n   zip = new JSZip();\n   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");\n   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});\n   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});\n   zip.remove(\"tempfile\");\n\n   base64zip = zip.generate();\n\n**/\n\n/**\n * Representation a of zip file in js\n * @constructor\n * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).\n * @param {Object=} options the options for creating this objects (optional).\n */\n\n\nfunction JSZip(data, options) {\n  // if this constructor is used without `new`, it adds `new` before itself:\n  if (!(this instanceof JSZip)) return new JSZip(data, options); // object containing the files :\n  // {\n  //   \"folder/\" : {...},\n  //   \"folder/data.txt\" : {...}\n  // }\n\n  this.files = {};\n  this.comment = null; // Where we are in the hierarchy\n\n  this.root = \"\";\n\n  if (data) {\n    this.load(data, options);\n  }\n\n  this.clone = function () {\n    var newObj = new JSZip();\n\n    for (var i in this) {\n      if (typeof this[i] !== \"function\") {\n        newObj[i] = this[i];\n      }\n    }\n\n    return newObj;\n  };\n}\n\nJSZip.prototype = require('./object');\nJSZip.prototype.load = require('./load');\nJSZip.support = require('./support');\nJSZip.defaults = require('./defaults');\n/**\n * @deprecated\n * This namespace will be removed in a future version without replacement.\n */\n\nJSZip.utils = require('./deprecatedPublicUtils');\nJSZip.base64 = {\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  encode: function (input) {\n    return base64.encode(input);\n  },\n\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  decode: function (input) {\n    return base64.decode(input);\n  }\n};\nJSZip.compressions = require('./compressions');\nmodule.exports = JSZip;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/node_modules/jszip/lib/index.js"],"names":["base64","require","JSZip","data","options","files","comment","root","load","clone","newObj","i","prototype","support","defaults","utils","encode","input","decode","compressions","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;AAYA;;;;;;;;AAMA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC1B;AACA,MAAG,EAAE,gBAAgBF,KAAlB,CAAH,EAA6B,OAAO,IAAIA,KAAJ,CAAUC,IAAV,EAAgBC,OAAhB,CAAP,CAFH,CAI1B;AACA;AACA;AACA;AACA;;AACA,OAAKC,KAAL,GAAa,EAAb;AAEA,OAAKC,OAAL,GAAe,IAAf,CAX0B,CAa1B;;AACA,OAAKC,IAAL,GAAY,EAAZ;;AACA,MAAIJ,IAAJ,EAAU;AACN,SAAKK,IAAL,CAAUL,IAAV,EAAgBC,OAAhB;AACH;;AACD,OAAKK,KAAL,GAAa,YAAW;AACpB,QAAIC,MAAM,GAAG,IAAIR,KAAJ,EAAb;;AACA,SAAK,IAAIS,CAAT,IAAc,IAAd,EAAoB;AAChB,UAAI,OAAO,KAAKA,CAAL,CAAP,KAAmB,UAAvB,EAAmC;AAC/BD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,KAAKA,CAAL,CAAZ;AACH;AACJ;;AACD,WAAOD,MAAP;AACH,GARD;AASH;;AACDR,KAAK,CAACU,SAAN,GAAkBX,OAAO,CAAC,UAAD,CAAzB;AACAC,KAAK,CAACU,SAAN,CAAgBJ,IAAhB,GAAuBP,OAAO,CAAC,QAAD,CAA9B;AACAC,KAAK,CAACW,OAAN,GAAgBZ,OAAO,CAAC,WAAD,CAAvB;AACAC,KAAK,CAACY,QAAN,GAAiBb,OAAO,CAAC,YAAD,CAAxB;AAEA;;;;;AAIAC,KAAK,CAACa,KAAN,GAAcd,OAAO,CAAC,yBAAD,CAArB;AAEAC,KAAK,CAACF,MAAN,GAAe;AACX;;;;AAIAgB,EAAAA,MAAM,EAAG,UAASC,KAAT,EAAgB;AACrB,WAAOjB,MAAM,CAACgB,MAAP,CAAcC,KAAd,CAAP;AACH,GAPU;;AAQX;;;;AAIAC,EAAAA,MAAM,EAAG,UAASD,KAAT,EAAgB;AACrB,WAAOjB,MAAM,CAACkB,MAAP,CAAcD,KAAd,CAAP;AACH;AAdU,CAAf;AAgBAf,KAAK,CAACiB,YAAN,GAAqBlB,OAAO,CAAC,gBAAD,CAA5B;AACAmB,MAAM,CAACC,OAAP,GAAiBnB,KAAjB","sourcesContent":["'use strict';\n\nvar base64 = require('./base64');\n\n/**\nUsage:\n   zip = new JSZip();\n   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");\n   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});\n   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});\n   zip.remove(\"tempfile\");\n\n   base64zip = zip.generate();\n\n**/\n\n/**\n * Representation a of zip file in js\n * @constructor\n * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).\n * @param {Object=} options the options for creating this objects (optional).\n */\nfunction JSZip(data, options) {\n    // if this constructor is used without `new`, it adds `new` before itself:\n    if(!(this instanceof JSZip)) return new JSZip(data, options);\n    \n    // object containing the files :\n    // {\n    //   \"folder/\" : {...},\n    //   \"folder/data.txt\" : {...}\n    // }\n    this.files = {};\n\n    this.comment = null;\n\n    // Where we are in the hierarchy\n    this.root = \"\";\n    if (data) {\n        this.load(data, options);\n    }\n    this.clone = function() {\n        var newObj = new JSZip();\n        for (var i in this) {\n            if (typeof this[i] !== \"function\") {\n                newObj[i] = this[i];\n            }\n        }\n        return newObj;\n    };\n}\nJSZip.prototype = require('./object');\nJSZip.prototype.load = require('./load');\nJSZip.support = require('./support');\nJSZip.defaults = require('./defaults');\n\n/**\n * @deprecated\n * This namespace will be removed in a future version without replacement.\n */\nJSZip.utils = require('./deprecatedPublicUtils');\n\nJSZip.base64 = {\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    encode : function(input) {\n        return base64.encode(input);\n    },\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    decode : function(input) {\n        return base64.decode(input);\n    }\n};\nJSZip.compressions = require('./compressions');\nmodule.exports = JSZip;\n"]},"metadata":{},"sourceType":"script"}