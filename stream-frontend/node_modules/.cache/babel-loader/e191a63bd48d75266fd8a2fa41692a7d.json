{"ast":null,"code":"var _jsxFileName = \"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Dashboard/Dashboard.js\";\nimport React, { useContext, useState } from 'react';\nimport { AppContext } from '../Context';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { Select, Typography, Spin, DatePicker } from 'antd';\nimport LineChart from './LineChart';\nimport group_month from './utils';\nconst {\n  Option\n} = Select;\nconst {\n  MonthPicker\n} = DatePicker;\nconst {\n  Title\n} = Typography;\nconst AppLayout = styled.div`\n  display: grid;\n  padding: 1em;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: 1000px;\n`;\n\nconst Dashboard = () => {\n  const contextData = useContext(AppContext);\n  const documents = contextData['ledger'];\n  const entities = contextData['entities_list'];\n  const [selectedEntities, setSelectedEntities] = useState(entities);\n  const [variable, setVariable] = useState(\"notices\");\n  const dateFormat = 'YYYY-MM-DD';\n  const startStr = moment('2019-01-01', dateFormat);\n  const [startDate, setstartDate] = useState(startStr);\n  const now = moment().toDate();\n  const endStr = moment(now, dateFormat);\n  const [endDate, setendDate] = useState(endStr);\n\n  const handleentityChange = event => {\n    if (event.length == 0) {\n      setSelectedEntities(entities);\n    } else {\n      setSelectedEntities(event);\n    }\n  };\n\n  function handlestartChange(date, dateString) {\n    console.log(date, dateString);\n    setstartDate(date);\n  }\n\n  function handleendChange(date, dateString) {\n    console.log(date, dateString);\n    setendDate(date);\n  }\n\n  let dateFormatown = \"MM/DD/YYYY\";\n  const documents_filtered = [];\n  documents.map(item => {\n    let date_check = moment(item.notice_date, dateFormatown);\n    item.month = moment(item.notice_date).format('YYYY/MM');\n\n    if (selectedEntities.includes(item.entity_name) && date_check.isAfter(startDate) && date_chacek.isBefore(endDate)) {\n      documents_filtered.push(item);\n    }\n  });\n  const filtered_data = group_month(documents, startDate, endDate, dateFormat);\n  const entitieschildren = [];\n  entities.map(entity => {\n    entitieschildren.push( /*#__PURE__*/React.createElement(Option, {\n      key: entity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 31\n      }\n    }, entity));\n  });\n  return /*#__PURE__*/React.createElement(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Selection pane\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \"Variable:\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: 300\n    },\n    defaultValue: variable,\n    onChange: event => setVariable(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"dollar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Dollar value \"), /*#__PURE__*/React.createElement(Option, {\n    value: \"notices\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Number of notices\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Legal entities\"), /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: 300\n    },\n    onChange: handleentityChange,\n    placeholder: \"All entities selected\",\n    mode: \"multiple\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, entitieschildren), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Starting month:\"), /*#__PURE__*/React.createElement(MonthPicker, {\n    defaultValue: startStr,\n    onChange: handlestartChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MonthPicker, {\n    defaultValue: endDate,\n    onChange: handleendChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px',\n      marginLeft: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: filtered_data,\n    variable: variable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Dashboard/Dashboard.js"],"names":["React","useContext","useState","AppContext","styled","moment","Select","Typography","Spin","DatePicker","LineChart","group_month","Option","MonthPicker","Title","AppLayout","div","Dashboard","contextData","documents","entities","selectedEntities","setSelectedEntities","variable","setVariable","dateFormat","startStr","startDate","setstartDate","now","toDate","endStr","endDate","setendDate","handleentityChange","event","length","handlestartChange","date","dateString","console","log","handleendChange","dateFormatown","documents_filtered","map","item","date_check","notice_date","month","format","includes","entity_name","isAfter","date_chacek","isBefore","push","filtered_data","entitieschildren","entity","padding","width","marginLeft"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\nimport { AppContext } from '../Context';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\n\nimport {Select, Typography, Spin, DatePicker} from 'antd';\n\n\nimport LineChart  from './LineChart'\n\nimport group_month from './utils'\n\nconst {Option} = Select;\nconst { MonthPicker } = DatePicker;\nconst {Title} = Typography;\n\nconst AppLayout = styled.div`\n  display: grid;\n  padding: 1em;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: 1000px;\n`\n\nconst Dashboard = () => {\n    const contextData = useContext(AppContext)\n    const documents = contextData['ledger'];\n    const entities = contextData['entities_list']\n    const [selectedEntities, setSelectedEntities] = useState(entities)\n\n    const [variable, setVariable] = useState(\"notices\")\n    const dateFormat = 'YYYY-MM-DD';\n    const startStr = moment('2019-01-01', dateFormat) \n    const [startDate, setstartDate] = useState(startStr)\n    \n    const now = moment().toDate()\n    const endStr = moment(now, dateFormat) \n    const [endDate, setendDate] = useState(endStr)\n\n      \n\n    const handleentityChange = (event) => {\n      if (event.length == 0) {\n          setSelectedEntities(entities)\n      } else {\n          setSelectedEntities(event)\n      }\n  }\n\n  function handlestartChange(date, dateString) {\n    console.log(date, dateString);\n    setstartDate(date)\n  }\n\n  function handleendChange(date, dateString) {\n    console.log(date, dateString);\n    setendDate(date)\n}\n\n    let dateFormatown = \"MM/DD/YYYY\"\n    \n\n    const documents_filtered = []\n    documents.map(item => {\n          let date_check = moment(item.notice_date, dateFormatown)          \n          item.month = moment(item.notice_date).format('YYYY/MM')\n          if (selectedEntities.includes(item.entity_name) && \n             date_check.isAfter(startDate) &&\n             date_chacek.isBefore(endDate)\n          ) {\n            documents_filtered.push(item)\n          }\n    })\n    \n    const filtered_data = group_month(documents, startDate, endDate, dateFormat)\n\n   \n\n\n    const entitieschildren = []\n    entities.map(entity =>{\n        entitieschildren.push(<Option key={entity}>{entity}</Option>)\n    })\n\n    \n    return (\n        <AppLayout>\n            <div style ={{padding: '20px'}}>\n            <Title level={4}>\n                Selection pane\n            </Title>\n            <p>\n            Variable:\n            </p>\n            <Select\n             style={{ width: 300 }}\n             defaultValue={variable}\n             onChange ={event => setVariable(event)}\n             >\n                <Option value=\"dollar\">Dollar value </Option>\n                <Option value=\"notices\">Number of notices</Option>\n            </Select>\n            <p>\n            Legal entities \n            </p>\n            <Select\n             style={{ width: 300 }}\n             onChange={handleentityChange}\n             placeholder=\"All entities selected\"\n             mode=\"multiple\"\n             >\n               {entitieschildren}\n            </Select>\n            <p>Starting month:</p>\n            <MonthPicker \n            defaultValue={startStr}\n            onChange={handlestartChange}\n            />\n            <MonthPicker \n            defaultValue={endDate}\n            onChange={handleendChange}\n            />\n    \n        </div>\n\n\n        <div style ={{padding: '20px', \n                  marginLeft: '20px'}}>\n           \n            \n            <LineChart data = {filtered_data} variable = {variable}/>\n        </div>\n\n        \n        </AppLayout>\n\n\n        )\n    \n}\n\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}