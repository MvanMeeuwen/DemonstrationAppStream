{"ast":null,"code":"'use strict';\n\nvar DataReader = require('./dataReader');\n\nvar utils = require('./utils');\n\nfunction StringReader(data, optimizedBinaryString) {\n  this.data = data;\n\n  if (!optimizedBinaryString) {\n    this.data = utils.string2binary(this.data);\n  }\n\n  this.length = this.data.length;\n  this.index = 0;\n}\n\nStringReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\n\nStringReader.prototype.byteAt = function (i) {\n  return this.data.charCodeAt(i);\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\n\n\nStringReader.prototype.lastIndexOfSignature = function (sig) {\n  return this.data.lastIndexOf(sig);\n};\n/**\n * @see DataReader.readData\n */\n\n\nStringReader.prototype.readData = function (size) {\n  this.checkOffset(size); // this will work because the constructor applied the \"& 0xff\" mask.\n\n  var result = this.data.slice(this.index, this.index + size);\n  this.index += size;\n  return result;\n};\n\nmodule.exports = StringReader;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/node_modules/jszip/lib/stringReader.js"],"names":["DataReader","require","utils","StringReader","data","optimizedBinaryString","string2binary","length","index","prototype","byteAt","i","charCodeAt","lastIndexOfSignature","sig","lastIndexOf","readData","size","checkOffset","result","slice","module","exports"],"mappings":"AAAA;;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AAEA,SAASE,YAAT,CAAsBC,IAAtB,EAA4BC,qBAA5B,EAAmD;AAC/C,OAAKD,IAAL,GAAYA,IAAZ;;AACA,MAAI,CAACC,qBAAL,EAA4B;AACxB,SAAKD,IAAL,GAAYF,KAAK,CAACI,aAAN,CAAoB,KAAKF,IAAzB,CAAZ;AACH;;AACD,OAAKG,MAAL,GAAc,KAAKH,IAAL,CAAUG,MAAxB;AACA,OAAKC,KAAL,GAAa,CAAb;AACH;;AACDL,YAAY,CAACM,SAAb,GAAyB,IAAIT,UAAJ,EAAzB;AACA;;;;AAGAG,YAAY,CAACM,SAAb,CAAuBC,MAAvB,GAAgC,UAASC,CAAT,EAAY;AACxC,SAAO,KAAKP,IAAL,CAAUQ,UAAV,CAAqBD,CAArB,CAAP;AACH,CAFD;AAGA;;;;;AAGAR,YAAY,CAACM,SAAb,CAAuBI,oBAAvB,GAA8C,UAASC,GAAT,EAAc;AACxD,SAAO,KAAKV,IAAL,CAAUW,WAAV,CAAsBD,GAAtB,CAAP;AACH,CAFD;AAGA;;;;;AAGAX,YAAY,CAACM,SAAb,CAAuBO,QAAvB,GAAkC,UAASC,IAAT,EAAe;AAC7C,OAAKC,WAAL,CAAiBD,IAAjB,EAD6C,CAE7C;;AACA,MAAIE,MAAM,GAAG,KAAKf,IAAL,CAAUgB,KAAV,CAAgB,KAAKZ,KAArB,EAA4B,KAAKA,KAAL,GAAaS,IAAzC,CAAb;AACA,OAAKT,KAAL,IAAcS,IAAd;AACA,SAAOE,MAAP;AACH,CAND;;AAOAE,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["'use strict';\nvar DataReader = require('./dataReader');\nvar utils = require('./utils');\n\nfunction StringReader(data, optimizedBinaryString) {\n    this.data = data;\n    if (!optimizedBinaryString) {\n        this.data = utils.string2binary(this.data);\n    }\n    this.length = this.data.length;\n    this.index = 0;\n}\nStringReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nStringReader.prototype.byteAt = function(i) {\n    return this.data.charCodeAt(i);\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nStringReader.prototype.lastIndexOfSignature = function(sig) {\n    return this.data.lastIndexOf(sig);\n};\n/**\n * @see DataReader.readData\n */\nStringReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    // this will work because the constructor applied the \"& 0xff\" mask.\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = StringReader;\n"]},"metadata":{},"sourceType":"script"}