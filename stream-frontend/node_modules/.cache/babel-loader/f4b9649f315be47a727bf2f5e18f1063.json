{"ast":null,"code":"var _jsxFileName = \"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Confirmation/Confirmation.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../Context';\nimport { map, without, filter } from 'lodash';\nimport { Storage } from 'aws-amplify';\nimport { Form, Input, Button, Select, message, Typography, AutoComplete, Row, Col, Checkbox, Progress } from 'antd';\nimport styled from 'styled-components';\nimport { CheckOutlined, RollbackOutlined } from '@ant-design/icons';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nconst formItemLayout = {\n  labelCol: {\n    sm: {\n      span: 8\n    }\n  }\n};\n\nfunction isString(x) {\n  return Object.prototype.toString.call(x) === \"[object String]\";\n}\n\nconst {\n  TextArea\n} = Input;\nconst {\n  Title\n} = Typography;\nconst {\n  Option\n} = Select;\nconst AppLayout = styled.div`\n  display: grid;\n  padding: 2em;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1000px;\n`;\n\nconst Confirmation = () => {\n  const data = useContext(AppContext);\n  const docData = data['demo']['Items'];\n  const entities_list = data['entities_list'];\n  const [count, setCount] = useState(13);\n  const [image, setImage] = useState(null);\n  const doc_unique_ids = [];\n  docData.map(notice => {\n    doc_unique_ids.push(notice.unique_id);\n  });\n  docData.map(notice => {\n    console.log(notice);\n  });\n\n  const fetchData = () => {\n    Storage.get(doc_unique_ids[count] + '.jpeg', {\n      level: 'public'\n    }).then(data => setImage(data)).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [count]);\n  const data_elements = [\"ID\", \"TAX YEAR\", \"NOTICE DATE\", \"AMOUNT\", \"NOTICE NUMBER\", \"DUE DATE\"];\n  const initialValues = docData[count];\n  let keys = Object.keys(initialValues);\n  let values = Object.values(initialValues);\n  const initialFormValues = {};\n  keys.map(key => {\n    let item = initialValues[key];\n\n    if (isString(item)) {\n      initialFormValues[key] = item;\n    } else {\n      initialFormValues[key] = item[0];\n    }\n  });\n  console.log(initialFormValues);\n  const [form] = Form.useForm();\n  const document_types = [\"Announcement\", \"Refund\", \"Payment\"];\n  const document_type_json = [];\n  document_types.map(type => {\n    document_type_json.push({\n      'value': type\n    });\n  });\n  const entities_list_json = [];\n  entities_list.map(entity => {\n    entities_list_json.push({\n      'value': entity\n    });\n  });\n  const states = [\"Alabama\", \"Alaska\", \"Arkansas\", \"Arizona\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Iowa\", \"Idaho\", \"Illinois\", \"Indiana\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Missouri\", \"Mississippi\", \"Montana\", \"North Carolina\", \"North Dakota\", \"Nebraska\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"Nevada\", \"New York\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Virginia\", \"Vermont\", \"Washington\", \"Wisconsin\", \"West Virginia\", \"Wyoming\"];\n  let statesjson = [];\n  states.map(state => {\n    statesjson.push({\n      'value': state\n    });\n  });\n  let form_list = [/*#__PURE__*/React.createElement(Form.Item, {\n    name: \"state\",\n    label: \"State\",\n    key: \"state\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    options: statesjson,\n    filterOption: (inputValue, option) => option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"document_type\",\n    label: \"Notice type\",\n    key: \"document_type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    options: document_type_json,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"label\",\n    label: \"Label\",\n    key: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"entity\",\n    label: \"Entity\",\n    key: \"entity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    options: entities_list_json,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 18\n    }\n  })))];\n  keys.map(field => {\n    if (data_elements.includes(field)) {\n      let defaultvalue = initialValues[field][0];\n      let optionvalues = [];\n      initialValues[field].map(option => {\n        optionvalues.push({\n          'value': option\n        });\n      });\n      let formitem = /*#__PURE__*/React.createElement(Form.Item, {\n        label: field,\n        name: field,\n        key: field,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(AutoComplete, {\n        options: optionvalues,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 33\n        }\n      })));\n      form_list.push(formitem);\n    }\n  });\n  let form_list_tail = [/*#__PURE__*/React.createElement(Form.Item, {\n    name: \"remarks\",\n    label: \"Remarks\",\n    key: \"remarks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    placeholder: \"Additional remarks\",\n    autoSize: {\n      minRows: 2,\n      maxRows: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"third_party\",\n    label: \"Third party access\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    defaultChecked: initialValues.third_party,\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }))];\n  form_list.push(form_list_tail);\n  const progress_percentage = Math.round(count / docData.length * 100);\n\n  const showFeedback = () => {\n    message.info('Notice has been confirmed');\n    setCount(count + 1);\n    form.resetFields();\n  };\n\n  if (count == 13) {\n    return \"hallo\";\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    width: \"600px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rightHandside\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"actualTitle\",\n    style: {\n      marginBottom: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 25\n    }\n  }, \"Classification\"), JSON.stringify(initialValues.unique_id))), /*#__PURE__*/React.createElement(Progress, {\n    percent: progress_percentage,\n    status: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    layout: \"horizontal\",\n    form: form,\n    initialValues: initialFormValues,\n    onFinish: showFeedback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 21\n    }\n  }), form_list.map(field => {\n    return field;\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      float: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CheckOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 33\n    }\n  }), \"Confirm classification\")))), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, \"Incorrect classification\"))));\n};\n\nexport default Confirmation;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Confirmation/Confirmation.js"],"names":["React","useState","useContext","useEffect","AppContext","map","without","filter","Storage","Form","Input","Button","Select","message","Typography","AutoComplete","Row","Col","Checkbox","Progress","styled","CheckOutlined","RollbackOutlined","BrowserRouter","Router","Route","Link","formItemLayout","labelCol","sm","span","isString","x","Object","prototype","toString","call","TextArea","Title","Option","AppLayout","div","Confirmation","data","docData","entities_list","count","setCount","image","setImage","doc_unique_ids","notice","push","unique_id","console","log","fetchData","get","level","then","catch","err","data_elements","initialValues","keys","values","initialFormValues","key","item","form","useForm","document_types","document_type_json","type","entities_list_json","entity","states","statesjson","state","form_list","inputValue","option","value","toUpperCase","indexOf","field","includes","defaultvalue","optionvalues","formitem","form_list_tail","minRows","maxRows","third_party","progress_percentage","Math","round","length","showFeedback","info","resetFields","padding","marginBottom","JSON","stringify","float"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect} from 'react';\nimport { AppContext } from '../Context';\nimport { map, without, filter} from 'lodash';\nimport { Storage } from 'aws-amplify'\nimport { Form, Input, Button, Select, message, Typography, AutoComplete, Row, Col, Checkbox, Progress} from 'antd';\nimport styled from 'styled-components';\nimport { CheckOutlined, RollbackOutlined} from '@ant-design/icons';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst formItemLayout = {\n    labelCol: {\n        sm: { span: 8 },\n    }, \n  \n};\n\n\nfunction isString(x) {\n    return Object.prototype.toString.call(x) === \"[object String]\"\n  }\n\n\n\n\nconst { TextArea } = Input;\nconst { Title } = Typography; \nconst { Option } = Select;\nconst AppLayout = styled.div`\n  display: grid;\n  padding: 2em;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1000px;\n` \n\n\n\nconst Confirmation = () => {\n    \n    const data = useContext(AppContext)\n    const docData = data['demo']['Items']\n    const entities_list = data['entities_list']\n    const [count, setCount] = useState(13)\n    const [image, setImage] = useState(null)\n\n    const doc_unique_ids = []\n    docData.map(notice => {\n        doc_unique_ids.push(notice.unique_id)\n    })\n\n\n    docData.map(notice => {\n        console.log(notice)\n    })\n\n   \n     \n    const fetchData = () => {\n        Storage.get(doc_unique_ids[count] + '.jpeg', {level: 'public'})\n        .then(data => setImage(data))\n        .catch(err => console.log(err))\n        }\n    \n    useEffect(() => {\n        fetchData();\n      }, [count]);\n    \n    \n    \n    const data_elements = [\"ID\", \"TAX YEAR\", \"NOTICE DATE\", \"AMOUNT\", \"NOTICE NUMBER\",  \"DUE DATE\"]\n\n    const initialValues = docData[count]\n    \n    \n    \n    let keys = Object.keys(initialValues)\n    let values = Object.values(initialValues)\n    const initialFormValues = {}\n    \n    keys.map(key => {\n        let item = initialValues[key]\n        if ( isString(item) ) {\n            initialFormValues[key]  = item\n        } else {\n            initialFormValues[key] = item[0]\n        }\n        \n    })\n\n    console.log(initialFormValues)\n    const [form] = Form.useForm();\n    const document_types = [\"Announcement\", \"Refund\", \"Payment\"]\n    \n    const document_type_json = []\n    document_types.map(type => {\n        document_type_json.push({'value' : type})\n    })\n\n    const entities_list_json = []\n    entities_list.map(entity => {\n        entities_list_json.push({'value': entity})\n    })\n    \n\n    const states = [\"Alabama\",\"Alaska\",\"Arkansas\",\"Arizona\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Iowa\",\"Idaho\",\"Illinois\",\"Indiana\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Missouri\",\"Mississippi\",\"Montana\",\"North Carolina\",\"North Dakota\",\"Nebraska\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"Nevada\",\"New York\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Virginia\",\"Vermont\",\"Washington\",\"Wisconsin\",\"West Virginia\",\"Wyoming\"]\n    let statesjson = []\n    states.map(state => {\n        statesjson.push({'value' : state})\n\n    })\n \n\n    \n\n    let form_list = [\n        <Form.Item\n            name = \"state\"\n            label = \"State\"\n            key =\"state\"\n        >\n            <AutoComplete\n                options = {statesjson}\n                filterOption={(inputValue, option) =>\n                    option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n            }>\n                <Input size = \"large\"/>\n            </AutoComplete>\n        </Form.Item>,\n       \n          <Form.Item\n          name = \"document_type\"\n          label = \"Notice type\"\n          key = \"document_type\"       \n          >\n              <AutoComplete\n              options = {document_type_json}\n              >\n                  <Input size = \"large\"/>\n              </AutoComplete>\n            </Form.Item>,\n            <Form.Item\n                name = \"label\"\n                label = \"Label\"\n                key = \"label\"\n            >   \n                <Input size = \"large\"/>\n            </Form.Item>,\n             <Form.Item\n             name = \"entity\"\n             label = \"Entity\"\n             key = \"entity\"\n             >   \n             <AutoComplete\n                 options = {entities_list_json}\n                 >         \n                 <Input size = \"large\"/>\n                 </AutoComplete>\n             </Form.Item>\n    ]\n\n\n\n    \n    keys.map(field => {\n        if (data_elements.includes(field)) {\n    \n            let defaultvalue = initialValues[field][0]\n            let optionvalues = []\n            initialValues[field].map(option => {\n                optionvalues.push({'value' : option})\n            })\n\n            let formitem = <Form.Item\n                            label = {field}\n                            name = {field}\n                            key = {field}\n                            >\n                                 <AutoComplete\n                                    options = {optionvalues}\n                                 >\n                                <Input size = \"large\"/>\n                                </AutoComplete>\n                            </Form.Item>\n            form_list.push(formitem)   \n        }\n    })\n        let form_list_tail =   [             \n                <Form.Item\n                    name=\"remarks\"\n                    label=\"Remarks\"\n                    key=\"remarks\">\n                            <TextArea\n                                placeholder=\"Additional remarks\"\n                                autoSize={{ minRows: 2, maxRows: 6 }}\n                            />\n                </Form.Item>,\n                <Form.Item\n                    name = \"third_party\"\n                    label = \"Third party access\"\n                >\n                    <Checkbox defaultChecked = {initialValues.third_party} size = \"large\" />\n                </Form.Item>]              \n        form_list.push(form_list_tail)\n    const progress_percentage = Math.round((count/docData.length)*100)\n\n    const showFeedback = () => {\n        message.info('Notice has been confirmed');\n        setCount(count + 1)\n        form.resetFields();\n    }\n    \n    if (count == 13) {\n        return \"hallo\"\n    }\n    return <>\n        <AppLayout>\n            <div>\n            <img src = {image} width = '600px' />\n\n            </div>\n            <div className = \"rightHandside\">\n                <div style = {{padding: '1em'}}>\n                    <div className =\"actualTitle\" style ={{marginBottom: '1em'}}>     \n                    <Row>\n                        <Col sm={8}>\n                        </Col>\n                        <Col>\n                        <Title level = {4}> \n                            Classification\n                        </Title>\n                        {JSON.stringify(initialValues.unique_id)}\n                        </Col>\n                    </Row>    \n                        <Progress percent={progress_percentage} status=\"active\" />\n                    </div>\n                </div>\n                    <Form\n                        {...formItemLayout}\n                        layout = \"horizontal\"\n                        form = {form}\n                        initialValues={initialFormValues}\n                        onFinish = {showFeedback}\n                    >\n                        {form_list.map(field => {\n                            return (\n                                field\n                            )\n                        })\n                        }\n                        <Row>\n                            <Col sm={8}>\n                            </Col>\n                            <Col>\n                            <Button type = \"primary\" \n                                    htmlType = \"submit\"\n                                    style = {{float:'center'}}\n                                    >\n                                <CheckOutlined />\n                                Confirm classification\n                            </Button>\n                            </Col>\n                        </Row> \n                    </Form>\n\n                    <Button style = {{float:'right'}}\n                                    >\n                                \n                                Incorrect classification\n                            </Button>\n\n\n            </div>\n\n\n        </AppLayout>\n\n    </> \n\n    \n    \n\n\n                    \n\n}\n\n\nexport default Confirmation;"]},"metadata":{},"sourceType":"module"}