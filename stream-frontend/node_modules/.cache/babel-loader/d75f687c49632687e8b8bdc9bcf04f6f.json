{"ast":null,"code":"var _jsxFileName = \"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/GeoChart.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { useHistory } from \"react-router-dom\";\n/**\n * Component that renders a map the US.\n */\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const history = useHistory();\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#edf0f3\", \"#096dd9\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoAlbersUsa().fitSize([width, height], selectedCountry || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\", feature => {\n      let url = '/state_info' + '?state=' + feature.properties.NAME.toString();\n      history.push(url);\n    }).attr(\"class\", \"country\").on(\"mouseenter\", feature => {\n      svg.selectAll(\".tooltip\").data([feature.properties.NAME]).join(\"text\").attr(\"class\", \"tooltip\").text(feature.properties.NAME).attr(\"x\", 10).attr(\"y\", 10).transition().attr('opacity', 1);\n    }).transition().attr(\"fill\", feature => colorScale(feature.properties[property])).attr(\"d\", feature => pathGenerator(feature));\n  }, [data, dimensions, property, selectedCountry]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    id: \"graph\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","useHistory","GeoChart","data","property","history","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","join","on","url","NAME","toString","push","attr","text","transition","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { useHistory } from \"react-router-dom\";\n\n/**\n * Component that renders a map the US.\n */\n\n\nfunction GeoChart({ data, property }) {\n  const history = useHistory();\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#edf0f3\", \"#096dd9\"]);\n\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        let url = '/state_info' + '?state=' + feature.properties.NAME.toString()\n        history.push(url);\n      })\n      .attr(\"class\", \"country\")\n      .on(\"mouseenter\", feature =>{\n        svg.selectAll(\".tooltip\")\n        .data([feature.properties.NAME])\n        .join(\"text\")\n        .attr(\"class\", \"tooltip\")\n        .text(feature.properties.NAME)\n        .attr(\"x\", 10)\n        .attr(\"y\", 10)\n        .transition()\n        .attr('opacity', 1);\n      })\n      .transition()\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n      \n  }, [data, dimensions, property, selectedCountry]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef} id=\"graph\"></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}