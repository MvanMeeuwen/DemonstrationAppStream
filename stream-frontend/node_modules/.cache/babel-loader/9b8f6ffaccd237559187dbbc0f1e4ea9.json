{"ast":null,"code":"import _slicedToArray from\"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useContext}from'react';import{API}from'aws-amplify';import GeoChart from'./GeoChart';import Legend from'./Legend';import{Select,Typography,Spin}from'antd';import geodata from\"./gz_2010_us_040_00_500k.json\";import\"./graph.css\";import MergeData from'./MergeData';import{AppContext}from'../Context';import{groupBy}from'lodash';import{group}from'd3';var Option=Select.Option;var Title=Typography.Title,Text=Typography.Text;var Backlog=function Backlog(){var contextData=useContext(AppContext);var groupedData=contextData['documents_grouped_state'];var newData=contextData['demo']['Items'];var state_grouping=groupBy(newData,function(n){return n.state;});groupedData.map(function(state){if(state.state==\"Pennsylvania\"){state['demo']=state_grouping['Pennsylvania'].length;}else if(state.state==\"Illinois\"){state['demo']=state_grouping[\"Illinois\"].length;}else if(state.state==\"California\"){state['demo']=state_grouping[\"California\"].length;}else{state['demo']=0;}});console.log(groupedData);var data=MergeData({geodata:geodata,groupedData:groupedData});var _useState=useState(\"demo\"),_useState2=_slicedToArray(_useState,2),property=_useState2[0],setProperty=_useState2[1];var legendText=\"Number of notices in backlog\";return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"Graph\",style:{paddingTop:'20px'}},/*#__PURE__*/React.createElement(Title,{level:3},\"Geographic overview of backlog\"),/*#__PURE__*/React.createElement(Text,null,legendText),/*#__PURE__*/React.createElement(Legend,{data:data,property:property}),/*#__PURE__*/React.createElement(GeoChart,{data:data,property:property})));};export default Backlog;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/Backlog.js"],"names":["React","useState","useEffect","useContext","API","GeoChart","Legend","Select","Typography","Spin","geodata","MergeData","AppContext","groupBy","group","Option","Title","Text","Backlog","contextData","groupedData","newData","state_grouping","n","state","map","length","console","log","data","property","setProperty","legendText","paddingTop"],"mappings":"sJAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,CAAoCC,UAApC,KAAqD,OAArD,CACA,OAASC,GAAT,KAAoB,aAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAAQC,MAAR,CAAgBC,UAAhB,CAA4BC,IAA5B,KAAuC,MAAvC,CACA,MAAOC,CAAAA,OAAP,KAAoB,+BAApB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,OAAQC,OAAR,KAAsB,QAAtB,CACA,OAASC,KAAT,KAAsB,IAAtB,C,GAEQC,CAAAA,M,CAAWR,M,CAAXQ,M,IACAC,CAAAA,K,CAAgBR,U,CAAhBQ,K,CAAOC,I,CAAST,U,CAATS,I,CAEf,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAMC,CAAAA,WAAW,CAAGhB,UAAU,CAACS,UAAD,CAA9B,CAEA,GAAMQ,CAAAA,WAAW,CAAGD,WAAW,CAAC,yBAAD,CAA/B,CAEA,GAAME,CAAAA,OAAO,CAAGF,WAAW,CAAC,MAAD,CAAX,CAAoB,OAApB,CAAhB,CAGE,GAAIG,CAAAA,cAAc,CAAGT,OAAO,CAACQ,OAAD,CAAU,SAASE,CAAT,CAAY,CAChD,MAAOA,CAAAA,CAAC,CAACC,KAAT,CACD,CAF2B,CAA5B,CAIFJ,WAAW,CAACK,GAAZ,CAAgB,SAAAD,KAAK,CAAI,CAErB,GAAIA,KAAK,CAACA,KAAN,EAAe,cAAnB,CAAmC,CACjCA,KAAK,CAAC,MAAD,CAAL,CAAgBF,cAAc,CAAC,cAAD,CAAd,CAA+BI,MAA/C,CACD,CAFD,IAEO,IAAKF,KAAK,CAACA,KAAN,EAAe,UAApB,CAAgC,CACrCA,KAAK,CAAC,MAAD,CAAL,CAAgBF,cAAc,CAAC,UAAD,CAAd,CAA2BI,MAA3C,CACD,CAFM,IAEA,IAAKF,KAAK,CAACA,KAAN,EAAe,YAApB,CAAkC,CACvCA,KAAK,CAAC,MAAD,CAAL,CAAgBF,cAAc,CAAC,YAAD,CAAd,CAA6BI,MAA7C,CACD,CAFM,IAEA,CACLF,KAAK,CAAC,MAAD,CAAL,CAAgB,CAAhB,CACD,CACJ,CAXD,EAaAG,OAAO,CAACC,GAAR,CAAYR,WAAZ,EACA,GAAMS,CAAAA,IAAI,CAAGlB,SAAS,CAAC,CAACD,OAAO,CAAPA,OAAD,CAAUU,WAAW,CAAXA,WAAV,CAAD,CAAtB,CA1BoB,cA2BYnB,QAAQ,CAAC,MAAD,CA3BpB,wCA2Bb6B,QA3Ba,eA2BHC,WA3BG,eA6BpB,GAAIC,CAAAA,UAAU,CAAG,8BAAjB,CAIA,mBACI,qDACA,2BAAK,SAAS,CAAG,OAAjB,CAAyB,KAAK,CAAI,CAACC,UAAU,CAAG,MAAd,CAAlC,eACA,oBAAC,KAAD,EAAO,KAAK,CAAI,CAAhB,mCADA,cAEA,oBAAC,IAAD,MACGD,UADH,CAFA,cAKA,oBAAC,MAAD,EAAQ,IAAI,CAAEH,IAAd,CAAoB,QAAQ,CAAEC,QAA9B,EALA,cAMA,oBAAC,QAAD,EAAU,IAAI,CAAED,IAAhB,CAAsB,QAAQ,CAAEC,QAAhC,EANA,CADA,CADJ,CAeD,CAhDD,CAqDA,cAAeZ,CAAAA,OAAf","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport { API } from 'aws-amplify';\nimport GeoChart from './GeoChart';\nimport Legend from './Legend';\nimport {Select, Typography, Spin} from 'antd';\nimport geodata from \"./gz_2010_us_040_00_500k.json\";\nimport \"./graph.css\";\nimport MergeData from './MergeData';\nimport { AppContext } from '../Context';\nimport {groupBy} from 'lodash';\nimport { group } from 'd3';\n\nconst { Option } = Select;\nconst { Title, Text } = Typography\n\nconst Backlog = () => {\n  const contextData = useContext(AppContext)\n  \n  const groupedData = contextData['documents_grouped_state']\n\n  const newData = contextData['demo']['Items']\n  \n  \n    var state_grouping = groupBy(newData, function(n) {\n      return n.state;\n    });\n\n  groupedData.map(state => {\n\n      if (state.state == \"Pennsylvania\") {\n        state['demo'] = state_grouping['Pennsylvania'].length\n      } else if ( state.state == \"Illinois\") {\n        state['demo'] = state_grouping[\"Illinois\"].length\n      } else if ( state.state == \"California\") {\n        state['demo'] = state_grouping[\"California\"].length\n      } else {\n        state['demo'] = 0\n      }\n  })\n\n  console.log(groupedData)\n  const data = MergeData({geodata, groupedData})\n  const [property, setProperty] = useState(\"demo\")\n\n  let legendText = \"Number of notices in backlog\"\n\n  \n\n  return (\n      <>\n      <div className = \"Graph\" style = {{paddingTop : '20px'}}>\n      <Title level = {3}>Geographic overview of backlog</Title>\n      <Text>\n        {legendText}\n      </Text>\n      <Legend data={data} property={property} />\n      <GeoChart data={data} property={property} />\n      </div>\n\n\n\n    </>\n  );\n}\n\n\n\n\nexport default Backlog;"]},"metadata":{},"sourceType":"module"}