{"ast":null,"code":"import _slicedToArray from\"/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from\"react\";import{select,geoPath,geoAlbersUsa,min,max,scaleLinear}from\"d3\";import useResizeObserver from\"./useResizeObserver\";import{useHistory}from\"react-router-dom\";/**\n * Component that renders a map the US.\n */function GeoChart(_ref){var data=_ref.data,property=_ref.property;var history=useHistory();var svgRef=useRef();var wrapperRef=useRef();var dimensions=useResizeObserver(wrapperRef);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedCountry=_useState2[0],setSelectedCountry=_useState2[1];// will be called initially and on every data change\nuseEffect(function(){var svg=select(svgRef.current);var minProp=min(data.features,function(feature){return feature.properties[property];});var maxProp=max(data.features,function(feature){return feature.properties[property];});var colorScale=scaleLinear().domain([minProp,maxProp]).range([\"#edf0f3\",\"#096dd9\"]);// use resized dimensions\n// but fall back to getBoundingClientRect, if no dimensions yet.\nvar _ref2=dimensions||wrapperRef.current.getBoundingClientRect(),width=_ref2.width,height=_ref2.height;// projects geo-coordinates on a 2D plane\nvar projection=geoAlbersUsa().fitSize([width,height],selectedCountry||data).precision(100);// takes geojson data,\n// transforms that into the d attribute of a path element\nvar pathGenerator=geoPath().projection(projection);// render each country\nsvg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\",function(feature){console.log('/state_info'+'?'+feature.properties.NAME);var url='/state_info'+'?state='+feature.properties.NAME.toString();console.log(url);history.push(url);}).attr(\"class\",\"country\").on(\"mouseenter\",function(feature){console.log(feature);svg.selectAll(\".tooltip\").data([feature.properties.NAME]).join(\"text\").attr(\"class\",\"tooltip\").text(feature.properties.NAME).attr(\"x\",10).attr(\"y\",10).transition().attr('opacity',1);}).transition().attr(\"fill\",function(feature){return colorScale(feature.properties[property]);}).attr(\"d\",function(feature){return pathGenerator(feature);});},[data,dimensions,property,selectedCountry]);return/*#__PURE__*/React.createElement(\"div\",{ref:wrapperRef,style:{marginBottom:\"2rem\"}},/*#__PURE__*/React.createElement(\"svg\",{ref:svgRef,id:\"graph\"}));}export default GeoChart;","map":{"version":3,"sources":["/Users/maartenvanmeeuwen/Documents/stream-productie/stream-frontend/src/Components/Backlog/GeoChart.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoAlbersUsa","min","max","scaleLinear","useResizeObserver","useHistory","GeoChart","data","property","history","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","getBoundingClientRect","width","height","projection","fitSize","precision","pathGenerator","selectAll","join","on","console","log","NAME","url","toString","push","attr","text","transition","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoAlbersUsa, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport { useHistory } from \"react-router-dom\";\n\n/**\n * Component that renders a map the US.\n */\n\n\nfunction GeoChart({ data, property }) {\n  const history = useHistory();\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"#edf0f3\", \"#096dd9\"]);\n\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoAlbersUsa()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", feature => {\n        console.log('/state_info' + '?' + feature.properties.NAME);\n        let url = '/state_info' + '?state=' + feature.properties.NAME.toString()\n        console.log(url)\n        history.push(url);\n      })\n      .attr(\"class\", \"country\")\n      .on(\"mouseenter\", feature =>{\n        console.log(feature)\n        svg.selectAll(\".tooltip\")\n        .data([feature.properties.NAME])\n        .join(\"text\")\n        .attr(\"class\", \"tooltip\")\n        .text(feature.properties.NAME)\n        .attr(\"x\", 10)\n        .attr(\"y\", 10)\n        .transition()\n        .attr('opacity', 1);\n      })\n      .transition()\n      .attr(\"fill\", feature => colorScale(feature.properties[property]))\n      .attr(\"d\", feature => pathGenerator(feature));\n\n      \n  }, [data, dimensions, property, selectedCountry]);\n\n  return (\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef} id=\"graph\"></svg>\n    </div>\n  );\n}\n\nexport default GeoChart;"]},"metadata":{},"sourceType":"module"}